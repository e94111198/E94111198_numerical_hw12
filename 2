import numpy as np
from scipy.linalg import solve
import matplotlib.pyplot as plt

# 參數設定
K = 0.1
Δr = 0.1
Δt = 0.5
r_start, r_end = 0.5, 1.0
t_end = 10

Nr = int((r_end - r_start) / Δr) + 1
Nt = int(t_end / Δt) + 1

r = np.linspace(r_start, r_end, Nr)
t = np.linspace(0, t_end, Nt)
λ = Δt / (4 * K * Δr**2)

# 初始條件
T0 = 200 * (r - 0.5)

# ===== (a) Forward-Difference =====
T_fd = np.zeros((Nt, Nr))
T_fd[0, :] = T0.copy()

for n in range(Nt - 1):
    T_fd[n+1, -1] = 100 + 40 * t[n+1]  # Dirichlet at r=1
    for i in range(1, Nr - 1):
        dTdr = (T_fd[n, i+1] - T_fd[n, i-1]) / (2 * Δr)
        d2Tdr2 = (T_fd[n, i+1] - 2*T_fd[n, i] + T_fd[n, i-1]) / (Δr**2)
        T_fd[n+1, i] = T_fd[n, i] + (Δt / (4*K)) * (d2Tdr2 + (1 / r[i]) * dTdr)
    # Neumann at r=0.5: ∂T/∂r + 3T = 0 => (T[1] - T[0])/Δr + 3T[0] = 0
    T_fd[n+1, 0] = T_fd[n+1, 1] / (1 + 3*Δr)

# ===== (b) Backward-Difference =====
T_bd = np.zeros((Nt, Nr))
T_bd[0, :] = T0.copy()

for n in range(Nt - 1):
    A = np.zeros((Nr, Nr))
    b = np.zeros(Nr)

    for i in range(1, Nr - 1):
        A[i, i-1] = -λ * (1 - Δr / (2 * r[i]))
        A[i, i]   = 1 + 2*λ
        A[i, i+1] = -λ * (1 + Δr / (2 * r[i]))
        b[i] = T_bd[n, i]

    # Neumann: (T[1] - T[0])/Δr + 3*T[0] = 0  => T[0](1+3Δr) = T[1]
    A[0, 0] = 1 + 3*Δr
    A[0, 1] = -1
    b[0] = 0

    A[Nr-1, Nr-1] = 1
    b[Nr-1] = 100 + 40 * t[n+1]

    T_bd[n+1, :] = solve(A, b)

# ===== (c) Crank-Nicolson =====
T_cn = np.zeros((Nt, Nr))
T_cn[0, :] = T0.copy()

for n in range(Nt - 1):
    A = np.zeros((Nr, Nr))
    b = np.zeros(Nr)

    for i in range(1, Nr - 1):
        A[i, i-1] = -λ * (1 - Δr / (2 * r[i]))
        A[i, i]   = 1 + 2*λ
        A[i, i+1] = -λ * (1 + Δr / (2 * r[i]))

        b[i] = λ * (1 - Δr / (2 * r[i])) * T_cn[n, i-1] + \
               (1 - 2*λ) * T_cn[n, i] + \
               λ * (1 + Δr / (2 * r[i])) * T_cn[n, i+1]

    # Neumann BC at r=0.5
    A[0, 0] = 1 + 3*Δr
    A[0, 1] = -1
    b[0] = 0

    # Dirichlet BC at r=1
    A[Nr-1, Nr-1] = 1
    b[Nr-1] = 100 + 40 * t[n+1]

    T_cn[n+1, :] = solve(A, b)

# ===== 輸出結果 =====
def print_solution(T, method_name):
    print(f"=== {method_name} ===")
    for n in range(Nt):
        values = [f"{val:.3e}" for val in T[n]]
        print(f"t = {t[n]:.1f} : {values}")
    print()

print_solution(T_fd, "Forward-Difference")
print_solution(T_bd, "Backward-Difference")
print_solution(T_cn, "Crank-Nicolson")
